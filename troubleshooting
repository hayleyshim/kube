# Application Log 모니터링
- 지정한 pod 내의 특정 컨테이너 애플리케이션 로그 확인

$ kubectl logs PODNAME -c CONTAINER_NAME

$ kubectl run web --image=nginx
$ kubectl get pods
$ kubectl describe pod web
$ kubectl logs web

# 문제
- application log 추출하기
- 작업 클러스터 : hk8s
- poc의 로그 모니터링 후 'file not found' 오류가 있는 /var/CK2022/CUSTOM-LOG001파일에 저장하시오


$ kubectl get nodes

$ kubectl logs poc | grep 'file not found' > /var/CKA2022/CUSTOM-LOG001 파일에 저장



# 클러스터 리소스 모니터링
- pod가 사용하는 CPU나 Memory 리소스 정보 보기
$ kubectl top pods --sort-by=cpu
$ kubectl top pods --sort-by=memory

- node가 사용하는 CPU나 Memory 리소스 정보 보기
$ kubectl top nodes --sort-by=cpu
$ kubectl top nodes --sort-by=memory

- json 포맷을 기준으로 특정 리소스 정보 보기

$ kubectl get pod -o json

$ kubectl get pods --sort-by=.metadata.name

$ kubectl get pv --sort-by=.spec.capacity.storage


# 문제
- PV 정보보기
- 작업 클러스터 : hk8s
- 클러스터에 구성된 모든 PV를 capacity 별로 sort하여 /var/CKA2022/my-pv-list 파일에 저장하시오
- PV 출력 결과를 sort하기 위해 kubectl 명령만 사용하고 그 외 리눅스 명령은 적용하지 마시오.
 

$ kubectl config use-context hk8s

$ kubectl get pv -o json pv0001

$ kubectl get pv --sort-by='{.spec.capacity.storage}' > /var/CKA2022/my-pv-list

$ cat /var/CKA2022/my-pv-list


# 문제
- 작업 클러스터 : kubectl config user-context hk8s
- 'name=overloaded-cpu'레이블을 사용하여 Pod 중 CPU 소비율이 가장 높은 Pod의 이름을 찾아서 /var/CKA2022/custom-app-log에 기록하시오

$ kubectl get pods --show-labels

$ kubectl get pods --show-labels | grep name=overloaded-cpu

$ kubectl top pods

$ kubectl top pods --sort-by=cpu

$ echo 'campus-01' > /var/CKA2022/custom-app-log 
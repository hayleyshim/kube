# Secret
- ConfigMap : 컨테이너 구성 정보를 한곳에 모아서 관리
- Secret : 컨테이너가 사용하는 password, auth token, ssh key와 같은 중요한 정보를 저장하고 민감한 구성정보를 base64로 인코딩해서 한 곳에 모아서 관리
- 민감하지 않은 일반 설정파일 configMap을 사용하고 민감한 데이터는 secret을 사용

$ kubectl create secret generic eshop-secret \
    --from-literal=PASSWORD=fastcam \
    --from-literal=SCORE=90 

$ kubectl create secret generic eshop --from-literal=DBNAME=mysql --from-literal=USER=admin

$ kubectl get secrets

$ kubectl describe secrets eshop

$ kubectl get secrets eshop -o yaml

 
 # 문제
 - 작업 클러스터 : k8s
 - Secret Name: super-secret
 - Password: bob
 - Create a pod named pod-secrets-via-file, using the redis Image, which mounts a secret named super-secret at /secrets.

 $ kubectl create secret generic super-secret --from-literal=Password=bob

$ kubectl get secrets

$ kubectl describe secrets super-secret

$ kubectl run pod-secrets-via-file --image=redis --dry-run=client -o yaml > pod-secrets-via-file.yaml

vi.pod-secrets-via-file.yaml

https://kubernetes.io/docs/concepts/configuration/secret/


apiVersion: v1
kind: Pod
metadata:
  name: pod-secrets-via-file
spec:
  containers:
  - image: redis
    name: pod-secrets-via-file
    volumeMounts:
    - name: foo
      mountPath: "/secrets"
  volumes:
  - name: foo
    secret:
      secretName: super-secret


$ kubectl apply -f pod-secrets-via-file

$ kubectl get pods pod-secrets-via-file

$ kubectl exec pod-secrets-via-file -it -- /bin/bash

$ cd /secrets/

$ ls

$ vi Password

$ cat Password #마운트 확인



 - Create a second pod named pod-secrets-via-env, using the redis Image, which exports password as CONFIDENTIAL

$ kubectl run pod-secret-via-env --image=redis --dry-run=client -o yaml > pod-secret-via-env.yaml

vi pod-secret-via-env.yaml

https://kubernetes.io/docs/concepts/configuration/secret/

apiVersion: v1
kind: Pod
metadata:
  name: pod-secret-via-env
spec:
  containers:
  - image: redis
    name: pod-secret-via-env
    env:
      - name: CONFIDENTIAL
        valueFrom:
          secretKeyRef:
            name: super-secret
            key: Password

$ kubectl apply -f pod-secret-via-env.yaml

$ kubectl get pod pod-secret-via-env

$ kubectl exec pod-secret-via-env -- /bin/bash

$ env

$ kubectl get pods | grep pod-secret








  
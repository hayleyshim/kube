# Pod란
- Pod란 컨테이너를 표현하는 k8s API의 최소 단위
- Pod에는 하나 또는 여러 개의 컨테이너가 포함될 수 있음

# 명령어로 CLI 모드에서 생성
$ kubectl run web --image=nginx:1.14 --port=80

$ kubectl get pods

$ kubectl get pods -o wide

$ kubectl get pod -n devpos

$ kubectl delete pod web


# Yaml 템플릿으로 생성
- nginx 웹 서버 컨테이너를 pod로 동작시키기
- pod name : web
- image : nginx:1.14
- port : 80

$ kubectl run web --image=nginx:1.14 --port=80 --dry-run -o yaml > web.yaml
$ kubectl get pod -n devops
$ kubectl delete pod -n devops web


# Pod 생성하기 1
- 작업 클러스터 : k8s
- 'cka-exam'이라는 namespace를 만들고, 'cka-exam' namespace에 아래와 같은 pod를 생성하시오
- pod Name: pod-01
- image: busybox
- 환경변수 : CERT = "CKA-cert"
- command: /bin/sh
- args: -c "while true; do echo $(CERT); sleep 10;done"

$ kubectl config use-context k8s
$ kubectl create namespace cka-exam
$ kubectl run pod-01 --image=busybox --dry-run -o yaml > 3-1.yaml
$ cat 3-1.yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-01
  namespace: cka-exam
spec:
  containers:
  - name: pod-01
    image: busybox
    env:
    - name: CERT
      value: "CKA-cert"
    command: ["/bin/sh"]
    args: ["-c", "while true; do echo $(CERT); sleep 10;done"]

$ kubectl apply -f 3-1.yaml


# Pod 로그 확인해서 결과 추출하기
- 작업 클러스터 : hk8s
- Pod 'custom-app'의 log를 모니터링하고 'file not found' 메시지를 포함하는 로그 라인을 추출
- 추출된 결과는 /opt/REPORT/2022/custom-app-log

$ kubectl config use-context hk8s

$ kubectl get pods

$ kubectl logs custom-app

$ kubectl logs custom-app | grep 'file not found' > /opt/REPORT/2022/custom-app-log

$ cat /opt/REPORT/2022/custom-app-log


# Static Pod 만들기
- API 서버 없이 특정 노드에 있는 kubelet에 의해 직접 관리
- /etc/kubernetes/mainfests/ 디렉토리에 pod yaml 파일을 저장 시 적용됨

- static pod 디렉토리 구성

- 디렉토리 수정시 kubelet 데몬 재실행

- hk8s-w1에 static pod 만들기
1) ssh로 hk9s-w1 서버 접속
2) sudo -i로 root 권한 얻기
3) /etc/kubernetes/manifest 디렉토리에 pod yaml 파일 저장하기

$ kubectl run webserver --image=nginx:1.14 --port=80 --dry-run=client -o yaml > webserver.yaml

$ kubectl get pods -o wide


# Static Pod 생성하기
- hk8s-w1 노드에 nginx

$ ssh hk8s-w1
$ sudo -i
$ cat /var/lib/kubelet/config.yaml
$ cd /etc/kubernetes/manifests
$ kubectl run nginx-static-pod --image=nginx --port=80 --dry-run=client -o yaml > nginx-static-pod.yaml
$ kubectl get pods


# Multi-container
- 하나의 Pod에 여러 개의 컨테이너가 포함되어 함께 실행됨



# Multi-conaiter Pod 생성하기
- 작업 클러스터 : k8s
- 4개의 컨테이너를 동작시키는 eshop-frontend pod를 생성하시오
- pod image : nginx, redis, memcached, consul

$ kubectl run eshop-frontend --image=nginx --dry-run=client -o yaml > 3-2.yaml
'''3-2.yaml
apiVersion: v1
kind: Pod
metadata:
  name: eshop-frontend
spec:
  containers:
  - image: nginx
    name: nginx-container
  - image: redis
    name: redis-container
  - image: memcached
    name: memcached-container
  - image: consul
    name: consul-container
'''

$ kubectl create -f 3-2.yaml
$ kubectl get po eshop-frontend
$ kubectl describe po eshop-frontend


# Sidecar-container
- 기본 컨테이너 기능을 확장하기 위해 사용
- 본래의 컨테이너는 기본 서비스에 충실하고 추가 기능을 별도의 컨테이너를 이용해 적용
- 웹서버는 기본 서비스에 충실하고 추가로 생성되는 웹서버 로그는 별도의 사이드 카 컨테이너가 수집하여 외부 log aggregator로 전송하는 형태의 서비스


# Sdiecar container pod 생성하기
- 작업 클러스터 : k8s
- 현재 운영중인 eshop-cart-app pod의 로그를 kubernetes built-in logging 아키텍처(예: kubectl logs)에 통합하는 로그 스트리밍 사이드카 컨테이너를 운영하시오
- busybox 이미지를 사용하여 price라는 이름의 사이드카 컨테이너를 기존 eshop-app에 추가합니다.
- 새 price 컨테이너는 다음과 같은 command를 실행해야 합니다.
  command: /bin/sh, -c, "tail -n+1, -f /var/log/cart-app.log"
- /var/log에 마운트 될 볼륨을 사용하여 사이드카 컨테이너에서 로그 파일 cart-app.log를 사용해야 합니다.
- eshop-cart-app pod와 cart-app 컨테이너를 수정하지 마시오.

# 문제풀이
1. eshop-cart-app pod --> yaml
2. side-car container 추가
3. image : busybox
4. command : "/bin/sh", "-c", "tail -n+1 -f /var/log/cart-app.log"
5. volume mount


$ kubectl get pod eshop-cart-app

$ kubectl get pod eshop-cart-app -o yaml > 3-3.yaml
$ vi 3-3.yaml
'''3-3.yaml
apiVersion: v1
kind: Pod
metadata:
  name: eshop-cart-app
spec:
  containers:
  - command:
    - /bin/sh
    - -c
    - 'i=1;while :;do echo -e "$i: Price: $((RANDOM % 10000 +1))" >> /var/log/cart-app.log; i=$((i+1)); sleep 2; done'
    image: busybox
    name: cart-app
    volumeMounts:
    - mountPath: /var/log
      name: varlog
  - name: price
    image: busybox
    args: [/bin/sh, -c, 'tail -n+1, -f /var/log/cart-app.log']
    volumeMounts:
    - name: varlog
      volumeMounts:
      - name: varlog
        moutnPath: /var/log
  volumes:
  - emptyDir: {}
    name: varlog
      
'''

$ kubectl apply -f 3-3.yaml
